diff -ru a/STM8L15x_StdPeriph_Driver/src/stm8l15x_flash.c b/STM8L15x_StdPeriph_Driver/src/stm8l15x_flash.c
--- a/STM8L15x_StdPeriph_Driver/src/stm8l15x_flash.c	2019-01-03 23:29:49.105561534 +0100
+++ b/STM8L15x_StdPeriph_Driver/src/stm8l15x_flash.c	2019-01-03 23:46:39.886861784 +0100
@@ -129,7 +129,7 @@
 #define FLASH_CLEAR_BYTE   ((uint8_t)0x00)
 #define FLASH_SET_BYTE     ((uint8_t)0xFF)
 #define OPERATION_TIMEOUT  ((uint16_t)0xFFFF)
-/**
+/***
   * @}
   */
 /* Private macro -------------------------------------------------------------*/
@@ -147,8 +147,8 @@
 
 /* SDCC patch: for >64kB to pass data to/from inline ASM (SDCC doesn't support far pointers yet) */
 #if defined(_SDCC_BIGMEM_)     
-  uint32_t    asm_addr;      // 16b/24b address
-  uint8_t     asm_val;       // 1B data for r/w data
+  extern uint32_t    asm_addr;      // 16b/24b address
+  extern uint8_t     asm_val;       // 1B data for r/w data
 #endif // _SDCC_BIGMEM_
 
 /* Private Constants ---------------------------------------------------------*/
@@ -167,7 +167,14 @@
   * @{
   */
 
-#if defined (_SDCC_BIGMEM_)
+/**
+ */
+/* SDCC patch: for >64kB to pass data to/from inline ASM (SDCC doesn't support far pointers yet) */
+#if defined(_SDCC_BIGMEM_)     
+  uint32_t    asm_addr;      // 16b/24b address
+  uint8_t     asm_val;       // 1B data for r/w data
+#endif // _SDCC_BIGMEM_
+
 /**
   * @brief  write single byte to address
   * @note   is required for >64kB memory space and SDCC, which doesn't yet support far pointers
@@ -175,6 +182,7 @@
   *         Data :    value to write
   * @retval None
   */
+#if defined (_SDCC_BIGMEM_)
 void write_byte_address(uint32_t Address, uint8_t Data)
 {
   /* store address & data globally for assember */
@@ -189,6 +197,7 @@
 
 }
 
+#endif // _SDCC_BIGMEM_
 
 /**
   * @brief  Reads any byte from flash memory
@@ -196,6 +205,7 @@
   * @param  Address : address to read
   * @retval value read
   */
+#if defined (_SDCC_BIGMEM_)
 uint8_t read_byte_address(uint32_t Address)
 {
   /* store address globally for assember */
